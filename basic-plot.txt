* Script
**********
Some greeting-- Hi or Hello or Welcome - would be polite to start with
**********

*Hello and welcome to this  tutorial on Basic Plotting using Python in a series of tutorials on Python for Scientific Computing .This tutorial is created by the FOSSEE team , IIT Bombay .  

*The intended audience for this tutorial are Engineering , mathematics and science teachers and students

*The goals are to
help one use Python as a basic plotting tool.
and understand python as a scripting language.


*In this tutorial, we will cover the basics of the Plotting features available in Python. 
For this we shall use  Ipython and pylab. 
Ipython is An Enhanced Interactive Python interpreter. It provides additional features like tab completion,easier access to help , and many other useful features.
Pylab is python library which provides plotting functionality. 

I am assuming that you have both Ipython and Pylab installed on your system .

*On your terminal type in the command Ipython -pylab
$ ipython -pylab
press RETURN

We will first start with the absolute basic i.e how to print hello world

In []: print 'hello world'

Voila we have got hello world output 

To exit ipython type Ctrl-D . It will ask if you wish to exit ipython .

*Now we will get back to plotting .

type again :
$ ipython -pylab
press RETURN

First, we will create a sequence of equally spaced points starting from 0 to 2*pi , we will use function linspace for that

Type:
In []: x = lins<Tab> This is an Ipython feature that will auto-suggest the word

In []  x=linspace(
oops  I made a mistake . As you can see I made the mistake of not writing command correctly
and Ipython changed the prompt . To get the old prompt back type crtl-c

In []: x = linspace(0, 2*pi, 50)


To obtain the plot we say,
In []: plot(x, sin(x))
***
As you can see a plot has appeared on the screen. 
***

The plot has the default color and line properties. 

*To know more about any function,  example for the 'linspace' function you can type ? after it .

In []: linspace?

It shows documentation related to linspace function. 'help' talks in detail about arguments to be passed, return values, some examples on usage. You can scroll the help using up , down and pageup and pagedown arrows and q for quitting . See how easy to get help in python .  

*As you can see linspace can take three parameters start, stop, and num and returns num evenly space points . You can scroll through the help to know more about the function


In this case we have used two commands 
'pi' and 'sin' these come from 'pylab'library called using -pylab. 

*Now that we have a basic plot, we can label and title the plot. 
In []: xla<TAB>bel('x') will add a label to the x-axis. Note that 'x' is enclosed in quotes. 
Similarly
In []: ylabel('sin(x)') adds a label to the y-axis.
To add a title to plot we simply use 
In []: tit<TAB>le('Sinusoid').

Hmm we also got the axis's nicely labeled and the plot titled but there is still a important detail left.That might leave a teacher seeing this unsatisfied , it lacks a legend. 

Add a legend to the plot by typing 
In []: legend(['sin(x)'])

Ok what if I want the legend to be in the centre . It just requires us to define one extra parameter. 

We have just typed legend command can we reuse it . Yes 

To go to previous command, we can use 'UP Arrow key' and 'DOWN' will take us (in reverse order)/back.

We can modify previous command to specify the location of the legend, by passing an additional argument to the function. 
#Ask madhu how to describe the feature here.
In []: legend(['sin(x)'], loc = 'center')

Note that once 
other positions which can be tried are
'best' 
'right'


Very often in mathematical plots we have define certain points abd there meaning also called annotating . We next look at how to annotate
In this case, let's add a comment at the point of origin. 
In []: annotate('origin', xy=(0, 0))

The first argument is the comment string and second one is the position for it. 

Ok, what do I do with all this effort . I obviously have to save it . 

We save the plot by the function savefig
In []: savefig('sin.png') saves the figure with the name 'sin.png' in the current directory. 




#other supported formats are: eps, ps, pdf etc.

When we use plot again by default plots get overlaid.
In []: plot(x, cos(x))

we update Y axis label 
In []: ylabel('f(x)')

Now in these situations with overlaid graphs, legend becomes absolutely essential. To add multiple legends, we pass the strings within quotes separated by commas and enclosed within square brackets as shown.

In []: legend( [ 'sin(x)' , 'cos(x)'] )

In []: clf()
clears the plot area and starts afresh.



*In case we want to create multiple plots rather than overlaid plots, we use 'figure' function.
The figure command is used to open a plain figure window without any plot.
In []: figure(1)

We will use plot() plot again to plot a sin curve on figure(1)
In []: plot(x, sin(x))

to creates a new plain figure window without any plot type: 
In []: figure(2)
figure() is also used to shift the focus between multiple windows. 

Any command issued henceforth applies to this window only so typing
In []: plot(x, cos(x))
plots cos curve on second window now.
The previous plot window remains unchanged to these commands.



calling function figure using argument 1 shifts the focus back to figure(1).
In []: figure(1)

title() sets the title of figure(1) 
In []: title('sin(x)')

Now we save the plot of figure(1) by typing 
In []: savefig('sine.png')

close() closes figure(1). Now there is just one figure that is open and hence 
the focus is automatically shifted to figure(2).
In []: close()

close() now closes the figure(2).
In []: close()

The plot command takes the  parameters such as 'g' which generates the plot in green color. 

Passing the linewidth=2 option to plot, generates the plot with linewidth of two units.
Use Up arrow to get to the previous commands 
In []: plot(x, sin(x), 'g', linewidth=2) and add arguments

In []: clf()

In order to plot points you may pass '.' as a parameter to plot
In []: plot(x, sin(x), '.')

In []: clf()

In order to plot filled circles in black color you can pass 'ko' parameter to plot
In []: plot(x, cos(x), 'ko')

In []: clf()

A plot using dashed lines can be generated by passing the '--' parameter
In []: plot(x, sin(x), '--')

You may look at more options related to colors and type of lines using plot?(question mark)

In []: clf()

and finally to close the plot
In []: close()




****************
This brings us to the end of this tutorial.  Thank you for attending this first tutorial on Python for Scientific Computing 
****************
